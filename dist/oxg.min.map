{"version":3,"sources":["oxg.js"],"names":["AjaxHelper","url","options","xhr","window","ActiveXObject","e","XMLHttpRequest","method","data","qstring","key","push","encodeURIComponent","join","cache","toUpperCase","Date","getTime","onreadystatechange","readyState","before","call","status","contentType","getResponseHeader","complete","JSON","parse","responseText","responseXML","open","createXHR","setRequestHeader","send","oxg","boolean","callback","loadingCallback","ajax","make","module","exports"],"mappings":"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","file":"oxg.map","sourceRoot":"..","sourcesContent":["// Create Object\nvar AjaxHelper = {};\n\n// Making a function\nAjaxHelper.createXHR = (url, options) => {\n    // Setting xhr object to null because of browser support\n    var xhr = false;\n    /* Check if browser supports ajax */\n    // if browser is IE 8 or Older version\n    if ( window.ActiveXObject) {\n        try {\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }  catch (e) {\n            xhr = false;\n        }\n    }\n    // Any other browser that doesn't support ajax\n    if ( !window.XMLHttpRequest ) return false;\n    // if browser supports Ajax, then create AjaxRequest\n    xhr = new XMLHttpRequest();\n    // As it is a function, we have constructor, and we should get values from users\n    // Check if user passes options\n    options = options || {};\n    // Check if user passess request method\n    options.method = options.method || \"GET\";\n    // Check if user passes any data for POST requests\n    options.data = options.data || null;\n    // if post request passed then convert it to the post query \n    \n    if (options.data !== null) {\n        var qstring = [];\n        // filter through and set values\n        for (var key in options.data)\n            qstring.push(encodeURIComponent(key)+\"=\"+encodeURIComponent(options.data[key]));\n        // as last part join data with & so that POST query can realize\n        options.data = qstring.join(\"&\");\n    }   \n\n    // Check if chacing is enabled or not\n    if (options.cache == false && options.method.toUpperCase() == \"GET\")\n        url = url+\"?_=\"+ new Date().getTime()\n\n    // Parts of ajax request\n    xhr.onreadystatechange = () => {\n        // if request is loading\n        if (xhr.readyState == 1 && options.before) \n            options.before.call(xhr);\n\n        // if ajax request is successefull\n        if ( (xhr.readyState == 4) && xhr.status == 200 || xhr.status == 304 ) {\n            // Set Content Type That Server Can realize what is that about\n            var contentType = xhr.getResponseHeader('Content-Type');\n            // If Any Error\n            if (!options.complete) return false;    \n            \n            /* GET REQUEST */\n            // Check if GET request == json\n            if (contentType == \"application/json\")\n                return options.complete.call(xhr, JSON.parse(xhr.responseText));\n            // Check if GET request == xml\n            if (contentType == \"text/xml\" || contentType == \"application/xml\")\n                return options.complete.call(xhr, xhr.responseXML);\n            // As a default, set GET request file to anyFormat\n            return options.complete.call(xhr, xhr.responseText);\n        }   \n    };\n    // Open the request\n    xhr.open(options.method, url);\n\n    // And return Object\n    return xhr;\n};\n\n// Now function for user\nAjaxHelper.make = (url, options) => {\n    try {\n        // lets use function we made above\n        var xhr = AjaxHelper.createXHR(url, options);\n        // if Ajax request is not supported then return false\n        if (!xhr) return false;\n        // Set default Request Header That Server Can Realize\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n        // Check if request type == POST\n        if (options.method.toUpperCase() == \"POST\")\n            // if request type == POST, then set content type\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n\n        // Send the data to the server\n        xhr.send(options.data);\n        \n        // Return request\n        return xhr;\n    } catch(e) {\n        return e;\n    }\n};\n\nclass oxg {\n    constructor(url, data, method) {\n        this.url = url;\n        this.data = data;\n        this.method = method;\n    }\n\n    static get(url, data) {\n        this.url = url;\n        this.data = data;\n        this.method = \"GET\";\n\n        return new this(url, data, \"GET\");\n    }\n\n    cache(boolean) {\n        if (boolean) {\n            return;\n        }\n        this.cache = true;\n\n        return this;\n    }\n\n    loading(callback) {\n        this.loadingCallback = callback;   \n        return this;\n    }\n\n    then(callback) {\n        this.ajax = AjaxHelper.make(this.url, {\n            method: this.method,\n            data: this.data,\n            cache: this.cache,\n            before: this.loadingCallback,\n            complete: callback\n        });\n\n        return this;\n    }\n    \n    static post(url, data) {\n        this.url = url;\n        this.data = data;\n        this.method = \"POST\";\n\n        return new this(url, data, \"POST\");\n    }\n}\n\nmodule.exports = oxg;\n"]}